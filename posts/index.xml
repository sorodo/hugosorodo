<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on sorodo猫娘</title><link>https://sorodo.github.io/hugosorodo/posts/</link><description>Recent content in Posts on sorodo猫娘</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 28 May 2024 00:22:02 +0800</lastBuildDate><atom:link href="https://sorodo.github.io/hugosorodo/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>初始博客</title><link>https://sorodo.github.io/hugosorodo/posts/2024/05/%E5%88%9D%E5%A7%8B%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 28 May 2024 00:22:02 +0800</pubDate><guid>https://sorodo.github.io/hugosorodo/posts/2024/05/%E5%88%9D%E5%A7%8B%E5%8D%9A%E5%AE%A2/</guid><description>测试 ps:在最优化的课堂上摸鱼终于搭建好网站记录一下第一个blog,后续更新网站搭建的步骤
考虑到这个主题实在还是太有限制，大概率以后就当做一个过渡图册的记录了 暂时只设置一些日常的记录和图片的记录
hugo博客搭建记录 0.前置准备（github上部署） git包管理，hugo预编译文件， vscode(推荐) hugo: https://github.com/gohugoio/hugo/releases ps: 这三者都需要环境变量的配置 说明：对于Windows系统，在后续启动Hugo服务器时有报错，找到解决办法是下载扩展版（应该是有些Hugo主题在基础版上不支持），所以建议下载扩展版。即带有extended的版本，尤其是你需要一些看上去比较高级的主题时候。 如果遇到scss类的报错，毫无疑问，更换版本吧
执行
hugo version 如果正常显示版本，那么hugo就算安装完毕
1.Quick_Start 随后是新建一个文件夹目录，然后开始我们的工作喵
hugo new site your_site_name 进入我们刚刚建立好的博客地址里面喵
cd your_site_name 第一行：把当前目录进行初始化 第二行：下载anatole主题，并存放在themes文件夹中 第三行：把主题改为anatole(也可以直接进入config.toml里面结尾添上你需要的主题theme = &amp;ldquo;anatole&amp;rdquo; )
git init # 如果有需要，你可以去皮肤站来获取自己想要的主题 git submodule add https://github.com/lxndrblz/anatole.git themes/anatole echo theme = &amp;#34;anatole&amp;#34; &amp;gt;&amp;gt; config.toml 接下来写一篇博客看看是否可行
# 创建一个life的主页，并写一份first_day的博客 hugo new life/first_day.md # 运行下博客看是否可行 hugo server -D 这个时候如果出现了一下错误，请返回第0步，更换你的hugo版本，选择extend版本
Error building site: TOCSS: failed to transform &amp;#34;scss/main.scss&amp;#34; (text/x-scss): resource &amp;#34;scss/scss/main.</description><content type="html"><![CDATA[<h2 id="测试">测试</h2>
<p>ps:在最优化的课堂上摸鱼终于搭建好网站记录一下第一个blog,后续更新网站搭建的步骤<br>
考虑到这个主题实在还是太有限制，大概率以后就当做一个过渡图册的记录了
暂时只设置一些日常的记录和图片的记录</p>
<h2 id="heading"></h2>
<h2 id="heading-1"></h2>
<h2 id="hugo博客搭建记录">hugo博客搭建记录</h2>
<h3 id="0前置准备github上部署">0.前置准备（github上部署）</h3>
<p>git包管理，hugo预编译文件， vscode(推荐) <br>
hugo: <a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a>
ps: 这三者都需要环境变量的配置 <br>
说明：对于Windows系统，在后续启动Hugo服务器时有报错，找到解决办法是下载扩展版（应该是有些Hugo主题在基础版上不支持），所以建议下载扩展版。即带有extended的版本，尤其是你需要一些看上去比较高级的主题时候。
如果遇到scss类的报错，毫无疑问，更换版本吧</p>
<h3 id="heading-2"></h3>
<p>执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>hugo version
</span></span></code></pre></div><p>如果正常显示版本，那么hugo就算安装完毕</p>
<h3 id="heading-3"></h3>
<h2 id="heading-4"></h2>
<h3 id="1quick_start">1.Quick_Start</h3>
<p>随后是新建一个文件夹目录，然后开始我们的工作喵</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>hugo new site your_site_name
</span></span></code></pre></div><p>进入我们刚刚建立好的博客地址里面喵</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span><span style="color:#66d9ef">cd</span> your_site_name
</span></span></code></pre></div><p>第一行：把当前目录进行初始化 <br>
第二行：下载anatole主题，并存放在themes文件夹中 <br>
第三行：把主题改为anatole(也可以直接进入config.toml里面结尾添上你需要的主题theme = &ldquo;anatole&rdquo; )</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>git init  
</span></span><span style="display:flex;"><span># 如果有需要，你可以去皮肤站来获取自己想要的主题
</span></span><span style="display:flex;"><span>git submodule add https://github.com/lxndrblz/anatole.git themes/anatole  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">echo</span> theme = <span style="color:#e6db74">&#34;anatole&#34;</span> &gt;&gt; config.toml
</span></span></code></pre></div><p>接下来写一篇博客看看是否可行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span># 创建一个life的主页，并写一份first_day的博客
</span></span><span style="display:flex;"><span>hugo new life/first_day.md
</span></span><span style="display:flex;"><span># 运行下博客看是否可行
</span></span><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><p>这个时候如果出现了一下错误，请返回第0步，更换你的hugo版本，选择extend版本</p>
<pre tabindex="0"><code class="language-Error" data-lang="Error">Error building site: TOCSS: failed to transform &#34;scss/main.scss&#34; (text/x-scss): resource &#34;scss/scss/main.scss_de1a7f5f1c8c46959803c429bb697ff0&#34; not found in file cache
</code></pre><p>不出意外的话就可以访问cmd输出的一个本地的地址了  <br>
生成静态文件，准备进一步托管</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>hugo -D
</span></span></code></pre></div><h3 id="heading-5"></h3>
<h2 id="heading-6"></h2>
<h3 id="2-部署到自己的github上">2. 部署到自己的github上</h3>
<p>首先是准备一个自己的远程仓库（网上有很多教程） <br>
然后开始git提交远程仓库连击</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span># 在命令行中进行git 初始化
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span># 检查是否有改变
</span></span><span style="display:flex;"><span>git status
</span></span><span style="display:flex;"><span># 提交到暂存区
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span># 提交到版本库
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;msg&#34;</span>   
</span></span><span style="display:flex;"><span># 创建分支
</span></span><span style="display:flex;"><span>git branch -M main
</span></span><span style="display:flex;"><span>git remote add origin https://.....git # 这边改成你的远程仓库地址
</span></span><span style="display:flex;"><span># 推送到远程仓库
</span></span><span style="display:flex;"><span>git push -u origin main
</span></span></code></pre></div><h4 id="github-pages-部署设置">github pages 部署设置</h4>
<p>新建一个文件，在pingfan-blog目录下，名称为.github,然后在.github文件夹下新建一个文件夹workflows，在workflows文件夹下新建一个文件叫gh-pages.yml</p>
<p>总的路径为pingfan-blog/.github/workflows/gh-pages.yml</p>
<p>在gh-pages.yml输入以下内容后保存。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">github pages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">main </span> <span style="color:#75715e"># Set a branch to deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pull_request</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-20.04</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">permissions</span>: <span style="color:#ae81ff">write-all</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># Fetch Hugo themes (true OR recursive)</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>    <span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#39;latest&#39;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># extended: true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --minify</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">if</span>: <span style="color:#ae81ff">github.ref == &#39;refs/heads/main&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span>
</span></span></code></pre></div><p>注意：如果后面部署过程报错大概率是来自这个文件的问题，这边附上一些参考链接（该文件本人已经修改过，应该问题不大）</p>
<h3 id="heading-7"></h3>
<p>Github_Actions入门教程： <br>
<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p>
<h3 id="heading-8"></h3>
<p>然后再走一遍git提交四连：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>git status 
</span></span><span style="display:flex;"><span>git add . 
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;add yml file&#34;</span> 
</span></span><span style="display:flex;"><span>git push
</span></span></code></pre></div><p>找到刚刚的github仓库，点击Actions，就可以看到我们的网站部署成功了 <br>
如果没有成功，需要进一步修改 Settings-&gt;Actions-&gt;General-&gt;Workflow permissions 然后勾上第一条Read and write permissions点击Save即可</p>
<h3 id="heading-9"></h3>
<p>最后一步在settings-&gt;Pages修改branch为gh-pages（这几步没有图文就直接去知乎看吧，结尾给出参考链接）    最后刷新几次界面，会出现一个visit site选项。复制你的网址，回到工作目录的config.toml，替换掉baseURL的默认参数就可以了
最后再走一遍git提交四连：（以后要修改也通过这个方法）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>git status 
</span></span><span style="display:flex;"><span>git add . 
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;add yml file&#34;</span> 
</span></span><span style="display:flex;"><span>git push
</span></span></code></pre></div><h3 id="heading-10"></h3>
<h2 id="heading-11"></h2>
<h3 id="3-丰富网页">3. 丰富网页</h3>
<p>这一步其实没什么特别要说的，通过选取的theme，查看对应的说明文档。然后修改config.toml即可 <br>
然后遇到的第二个问题就是图片上传的事情。网上大多数教程是放置在status目录下，然后会转移到public里面。而hugo引用的是public下的内容。不过本人尝试过content和status各种路子。最后还是选择使用图床，图床才是真神（确信）</p>
<h1 id="heading-12"></h1>
<h2 id="heading-13"></h2>
<h2 id="参考链接">参考链接：</h2>
<h4 id="heading-14"></h4>
<p><a href="https://www.gohugo.org/">https://www.gohugo.org/</a> <br>
<a href="https://zhuanlan.zhihu.com/p/558804132">https://zhuanlan.zhihu.com/p/558804132</a> <br>
<a href="https://blog.csdn.net/qq_38250687/article/details/118488688">https://blog.csdn.net/qq_38250687/article/details/118488688</a> <br>
<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p>
]]></content></item></channel></rss>